Programovací jazyk Ruby vznikl v Japonsku. Jeho tvůrcem je Yukihiro Matsumoto, kterému se ve světě komunity kolem jazyka Ruby neřekne jinak než Matz. Matsumoto už jako student snil o tom, že vytvoří jazyk, který by byl jednoduchý, práce s ním byla zábava a přitom se hodil pro řešení většiny problémů. Jako fanoušek skriptovacích jazyků a objektově orientovaného přístupu objevil jazyky Python a Perl. Ani jeden z těchto jazyků však nenaplnil jeho očekávání. V předmluvě k nejoblíbenější učebnici jazyka Ruby<sup>1</sup> píše: *„Chtěl jsem jazyk, který by byl mocnější než Perl a více objektově orientovaný, než Python“* [[Thomas2004]](/diplomova-prace/pouzita-literatura#sections). Práce na svém novém programovacím jazyku započal v roce 1993 a 21. prosince roku 1995 předvedl odborné veřejnosti první verzi jazyka Ruby 0.95. Od té doby uběhlo více než 15 let. V době psaní této práce je nejaktuálnější verze jazyka 1.9.2 a tento programovací jazyk se těší stále větší oblibě po celém světě.

Postupem času se z Ruby stal jazyk, jenž se používá jak pro psaní malých jednoúčelových skriptů, tak pro psaní velkých škálovatelných aplikací. Například v NASA Langley Research Center slouží v programech pro simulaci chování. Nejvíce však vstoupil do povědomí díky webovému frameworku Ruby on Rails od společnosti [37signals](http://http://37signals.com/). Tento framework spatřil světlo světa v roce 2004. Od té doby se objevila celá řada jiných webových frameworků od těch větších jako je například [Merb](http://www.merbivore.com/) až po ty, které by se daly nazvat spíše micro-frameworky, jejichž typickým představitelem je [Sinatra](http://www.sinatrarb.com/).

Ruby se oproti ostatním jazykům vymyká v jedné základní věci a tou je filosofie, s níž byl tento jazyk vytvořen. Yukihiro Matsumoto tvrdí, že pro člověka je přirozené, aby tvořil -aby maloval obrazy, dělal sochy, navrhoval budovy a v jeho případě psal software. Zároveň však musí být šťastný v tom, co dělá, a proto vzniklo Ruby. Jazyk, který má programátorům pomoci dosahovat cílů a přitom jim nebude stát v cestě a práce pro ně bude zábavou. V předmluvě v knize Programming Ruby Matsumoto o Ruby píše: *„Věřím, že účelem života, alespoň částečně, je být šťastný. Na základě tohoto přesvědčení je Ruby navrženo tak, aby programování v něm nebylo pouze snadné, ale také zábavné. Umožňuje se soustředit na kreativní stránku programování a snižuje stres“* [[Thomas2004]](/diplomova-prace/pouzita-literatura#sections).

Existují dva přístupy, jak lze k programovacím jazykům přistupovat. Jedním je dívat se na jazyk z hlediska toho, co všechno je možné jím zapsat. Druhý přístup zdůrazňuje to, jak se s jazykem pracuje lidem, kteří ho využívají při své práci. Je velice složité, najít rovnováhu mezi těmito dvěma přístupy. Tvůrce Ruby proto sám říká, že nevytvořil dokonalý jazyk. Nebylo to ani jeho cílem. Cílem bylo vytvořit jazyk, při jehož používání se uživatelé budou cítit dobře [[Venners2003]](/diplomova-prace/pouzita-literatura#sections). Jakýkoliv jazyk, který vyhovuje Turingově terorii kompletního programovacího jazyka, může být nahrazen jiným jazykem, který splňuje tuto podmínku. Jinak řečeno, program, který lze napsat v jazyku Python, lze se stejným výsledkem zapsat v Assembleru nebo například v jazyku Brainfuck<sup>2</sup>. Počítač rozdíl nepozná. Patrný je ale pro člověka, který s daným jazykem pracuje. Projevuje v náročnosti práce a tím pádem se i odráží v pocitech, které z práce s ním pramení. Nemá smysl tvořit dokonalý jazyk, protože každý člověk je jiný, a proto se každému bude pracovat lépe s jiným jazykem.

Důraz na lidský faktor a jeho rozmanitost je prvkem, na který by se nemělo zapomínat. Žijeme v době, kdy se stává běžné, že většina interakcí s druhými lidmi se odehrává prostřednictvím počítačů. A právě slovo prostřednictvím hraje zásadní roli. Počítače jsou pouze nástrojem, který komunikaci umožňuje, nejsou však jejím příjemcem. Příjemcem sdělení je vždy člověk. Když píšeme email, nekomunikujeme s počítačem, ale s příjemcem dané zprávy. Pokud bychom komunikovali s počítačem, mohli bychom znaky zadávat v ASCII kódu, psát příkazy v Assembleru nebo je zadávat rovnou pomocí nul a jedniček. To je jazyk, kterému rozumí počítač. Stejně tak je to se psaním softwaru. V emailu představuje sdělení text, který je v něm obsažen. V případě softwaru je sdělení software sám. Počítačové programy nejsou psány pro počítače, jsou psány pro lidi, protože jen ti jsou jejich adresáty. Emaily se píší ve formě, která je pro lidi nejpřirozenějí. Stejným pravidlem bychom se měli řídit při psaní počítačových programů. Programátorům by tedy měl být poskytnut jazyk, kterým dokáží co nejefektivněji vyjádřit své myšlenky.

Yukihiro Matsumoto při psaní Ruby vycházel z myšlenky, že každý uživatel je jiný a jiným způsobem vyjadřuje své myšlenky. Tento předpoklad je tedy zabudován i v samotném jazyce. Jedna věc lze vyjádřit (zapsat) několika možnými způsoby. Je to přesně opačný přístup, než který je použit například v Pythonu, kde lze jedna věc udělat většinou jen jedním způsobem. Tvůrce Ruby se tak inspiroval v jazyku Perl, který právě poskytuje více způsobů, jak dojít ke stejnému výsledku. Výhoda Pythonu spočívá v tom, že pokud existuje pouze jeden možný způsob, jak daný problém zapsat, je velice pravděpodobné, že ho takto zapíše většina programátorů. Kód se tak stává méně variabilní a tím pádem i čitelnější. Výhoda Ruby naopak spočívá právě ve variabilitě. Jazyk programátora neomezuje a poskytuje mu širokou paletu příkazů (možností), ze kterých si může vybrat tu, která mu nejvíce vyhovuje.

Mohlo by se tak zdát, že program, který v Ruby napíše jeden programátor bude pro jiného špatně čitelný. Jak se ale zdá, tak právě čitelnost je jedna z jeho hlavních zbraní. Skoro v každé učebnici Ruby, návodu nebo článku na internetu, je v úvodní kapitole malá ukázka kódu a výzva, ať si tento kód čtenář přečte nahlas. S trochou fantazie je vyslovený kus kódu k nerozeznání od anglické věty. S jistou nadsázkou lze říci, že to je důvod, proč existuje více možností, jak vyjádřit jednu a tu samou věc různě napsaným kusem kódu, což nemusí být vždy na škodu, spíše naopak. V běžné řeči lidé také nekomunikují všichni stejně.

Poslední vlastností, která je pro tento jazyk charakteristická je princip nejmenšího překvapení<sup>3</sup> [[Matsumoto2001]](/diplomova-prace/pouzita-literatura#sections). Tento princip je mimo jiné možné najít v [[James1987]](/diplomova-prace/pouzita-literatura#sections) a také v [[Raymond2003]](/diplomova-prace/pouzita-literatura#sections). Netýká se pouze programování, ale také třeba navrhování uživatelských rozhraní. Základním východiskem je situace, kdy uživatel přichází již s nějakými znalostmi a zkušenostmi a právě na těch by se mělo stavět a ne se snažit jít proti nim. Matsumoto původně navrhoval Ruby tak, aby co nejméně přakvapovalo jeho samého, aby co nejvíce stavělo na programátorských principech, které on měl zažité a které se mu líbily. Jak se však později ukázalo, tento aspekt přijala za svůj celá komunita kolem tohoto jazyka. Samozřejmě to neznamená, že by jazyk byl natolik intuitivní, že by nepřekvapil nikoho. Vždy záleží na znalostech předchozích programovacích jazyků daného jedince. Tímto principem se také rozumí, že programátora, jenž se s Ruby dostatečně seznámí, by neměl jazyk už ničím překvapit. Ruby se snaží být konzistentní a dodržovat pravidla a principy, které si programátor osvojí již při učení jeho základů.

###Ruby na kolejích

Největší rozšíření jazyka Ruby nastalo po uvolnění frameworku Ruby on Rails (dále už jen zkráceně jako RoR) jako opensource projektu. Tvůrcem RoR je dánský programátor David Heinemeier Hansson, který je spoluzakladatelem a společníkem ve společnosti 37signals. O celosvětovém úspěchu RoR svědčí i to, že Hansson v roce 2005 převzal cenu Hacker of the Year, kterou uděluje společnost Google a O'Reilly. O rok později pak převzal cenu Jolt, která je udělována za signifikantní dopad na softwarový průmysl [[LoudThinking]](/diplomova-prace/pouzita-literatura#sections).
Hansson přiznává, že původním záměrem nebylo vytvořit webový framework a už vůbec ne takový, který by později mohl publikovat jako opensource. RoR vzniklo přirozenou cestou při programování aplikace Basecamp, která měla původně sloužit pouze pro interní potřeby ve společnosti 37signals. Po dokončení prací si Hansson uvědomil, kolik nástrojů pro svou vlastní potřebu vytvořil a tak z aplikace Basecamp separoval samotný framework. Toto se odehrálo v roce 2004, ale trvalo ještě celý jeden rok, než mohl celý projekt publikovat veřejně.

Zásadní otázkou zůstává, proč si Hansson vybral pro svou práci právě Ruby. Proč teď existuje framework Ruby on Rails a ne třeba PHP on Rails nebo Python on Rails? Ruby s Rails pojí jedna důležitá věc a to je filosofie, kterou vyznávají. Pokud člověk čte základní informace o Rails může mu připadat, že si čte o Ruby. Objevují se tu stejné věci, které měl v hlavě Yukihiro Matsumotu, když tvořil Ruby. Vztah Ruby a RoR lze popsat následující paralelou. Ruby je jazyk a v jazyku jako takovém, lze popsat cokoliv. RoR představují pouze úrčitý výsek, dalo by se říci žánr, jako je například ve filmovém odvětví thriller. To znamená, že pokud chceme natočit thriller, je RoR ideálním nástrojem, který perfektně naplní naše potřeby. Jestliže bychom však chtěli dělat romantický film, RoR představuje nevhodný nástroj a existují lepší [[Hopkins2010]](/diplomova-prace/pouzita-literatura#sections). RoR je nástrojem pro tvorbu webových aplikací. Pokud bychom chtěli vyvíjet například desktopové aplikace, existují k tomuto účelu jiné nástroje. To ale neznamená, že se nedají vyvíjet desktopové aplikace v Ruby.
Na otázku, zda by Hansson znovu sáhl po neznámém jazyku z Japonska, kdyby se mohl vrátit zpátky do minulosti, odpovídá jednoznačně - ano [[Hopkins2010]](/diplomova-prace/pouzita-literatura#sections). Podle jeho názoru hrají velkou roli emoce. Když psal dříve v Javě, C# nebo v PHP, nezažíval nikdy stejné pocity jako při psaní v Ruby a dodává: *„Ruby je mnohem blíže mým myšlenkovým pochodům. Zdá se mi, jako kdybych vyjadřoval přesně to, co chci říci a ani to nemusím překládat do kódu“* [Hopkins2010]. Existuje zde velká podobnost s běžnou lidkou řečí a různými jazyky. Každý jazyk je jiný a myšlenky se v něm vyjadřují trošku odlišným způsobem. Člověk sám k sobě mluví svým vlastním vnitřním jazykem. Tento jazyk není podobný žádnému známému jazyku a nejblíže má zřejmě k predikátové logice. Při vyjadřování v běžném jazyce dochází tedy vždy k překladu mezi naším vnitřním jazykem a jazykem, ve kterém chceme vyjádřit své myšlenky, tak aby nám rozuměli ostatní. Není tedy překvapivé, že lidé, kteří umí více jazyků, se v jednom dokáží vyjadřovat lépe než v druhém. To samé platí i v programovacích jazycích. Hansson k tomuto tématu říká, že přirozené jazyky se od sebe liší v rytmu a zvukomalebnosti. Když například porovnáme němčinu a francouzštinu, nemusíme ani mluvit francouzsky, abychom zjistili, že francouzština je libozvučnější jazyk. Stejné je to s programovacími jazyky [[Hopkins2010]](/diplomova-prace/pouzita-literatura#sections).

Většina lidí si dříve myslela, že programování je převážně o tom, jak aplikace udělat co nejrychlejší, nebo tak aby zabíraly co nejméně paměti. V současné době se ale i v softwarovém odvětví akcentuje přístup, který je zaměřen na lidi, tedy na programátory. Stejně jako v každém jiném odvětví, tak i zde platí, že lidé odvádějí mnohem kvalitnější práci, pokud je jejich práce baví a naplňuje. Napsat program, který bude přesně plnit dané zadání, není nic složitého a dosažení cíle lze dojít bespočtem cest. Důležitější než výsledek je proto cesta samotná a pocit, který člověk má, když po ní kráčí. V tom tkví zásadní rozdíl, rozdíl mezi prací a užíváním si práce. Je známo, jaké produkty vznikají, pokud si lidé svou práci opravdu užívají. O potřebě seberealizace psal již v 80. letech minulého století americký psycholog Abraham Maslow. Maslow je autorem známé teorie lidských potřeb, jíž se také říká Maslowova pyramida lidských potřeb. Pyramida znázorňuje hierarchicky uspořádané lidské potřeby od těch nejnižších, které jsou biologického rázu až po potřeby seberealizační, které jsou na jejím vrcholu. Člověk nejdříve uspokojuje nejnižší potřeby a až pokud jsou naplněny na určitou úroveň, orientuje své jednání k naplnění vyších potřeb.

Hansson ve svém rozhovoru s Peterem Hopkinsem [[Hopkins2010]](/diplomova-prace/pouzita-literatura#sections) poznamenává ještě jeden důležitý fakt. A to, že Ruby přilákalo k programování i lidi, kteří se o ně do té doby zajímali jen okrajově nebo vůbec. Existují různé názory na to, zda to vidět jako pozitivní nebo negativní jev. Jistá je však jedna věc - právě lidé, kteří nejsou ze své podstaty programátory, přicházejí díky svému rozhledu často s těmi nejlepšími nápady.

<hr />
<sup>1</sup> Jedná se o knihu Programming Ruby, které se v anglicky mluvících zemích přezdívá _pickaxe_, což v překladu znamená krumpáč, který je ztvárněný na obalu této knihy.

<sup>2</sup> Experimentální programovací jazyk, jehoţ tvůrcem je Urban Müller. Záměrem bylo vytvořit jazyk z co nejjednodušším a nejmenším překladačem. Jazyk samotný má pouze osm příkazů. [[Raiter]](/diplomova-prace/pouzita-literatura#sections)

<sup>3</sup> Z anglického Rule of Least Surprise nebo také Principle of Least Surprise
