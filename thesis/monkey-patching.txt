Tímto tajuplným názvem se označuje technika, pomocí které se mění nebo rozšiřuje kód aplikace za běhu programu [[Avdi2010]](/diplomova-prace/pouzita-literatura#sections). Jinými slovy to znamená, že je možné kdykoliv za běhu aplikace vstoupit do jakékoliv třídy a modifikovat ji. Existují různá pojetí toho, co se pod touto technikou skrývá a toto je to nejširší. V Ruby komunitě se tato technika stala velice populární a právě zde je chápána ve svém nejširším významu. Původně se této technice říkaloGuerrilla patching, což bylo určitě výstižnější. Slovo guerrilla se velice podobá slovu gorilla. Z toho vznikl Monkey patching. Velice zajímavý vývoj označení, ale na druhou stranu přesně odráží to, jaká je komunita, která ho vymyslela.

Monkey patching je v Ruby umožněn díky dvěma základním věcem. Zaprvé se jedná o dynamicky interpretovaný jazyk. To znamená, že každý kus kódu je interpretován až při svém zpracování. Zadruhé jsou třídy v Ruby navrženy jako otevřené. V praxi to má za následek, že je možné vzít například třídu String a přidat do ní nové metody nebo přepsat metody stávající.

Tento postup vyvolává celou řadu emocí a neshod. Jedním z největších argumentů proti používání podobných postupů je, že se tím zásadním způsobem porušují obecně platné principy objektově orientovaného programování, konkrétně zapouzdření. Důsledkem jsou poté pluginy, které současné mění chování standardních tříd a v praxi to funguje tak, že plugin, který mění třídu jako poslední, vyhrává. Výsledkem je nefunkční aplikace, kde je skoro nemožné dopátrat se příčiny chyby. Velikým odpůrcem této techniky je Jeff Atwood, který na svém blogu píše: *„Pokud vás myšlenka kolem Monkey patching trochu děsí, pak je to v pořádku. Představte si, že ladíte kód, kde se třída String chová podstatně jinak, než jak jste se učili“* [[Atwood2008]](/diplomova-prace/pouzita-literatura#sections).

Na druhou stranu Monkey patching je přesně v souladu s tím, co je uvedeno výše a co říká samotný tvůrce jazyka Ruby. Jeho smyslem nebylo vytvořit dokonalý jazyk, protože jazyk, který by byl dokonalý pro každého, neexistuje. Monkey patching představuje způsob, jak si každý může jazyk, alespoň trochu uzpůsobit k obrazu svému. Ruby ponechává vše na programátorech, nesvazuje jim ruce. David Heinemeier Hansson se sám sebe ptá: *„Dáte-li mi lano, oběsím se s ním? Nejspíše ne a raději ho použiji na něco užitečnějšího.“* [[Confreaks2010]](/diplomova-prace/pouzita-literatura#sections). Díky použití této techniky je pak možné v RoR zavolat na řetězec například metodu camelize, která ho převede do velbloudí notace. Podobný způsob vyjadřování je pak přesně tím důvodem, proč si Ruby získalo takovou oblibu.